Jacques de Beer            Due: Nov 19, 2012                       Test 2
                                                                   Phys108

7)


type canfacn

function canfacn(en,aint,bint)

%canfacn determines whether or not n can be factored into a^b

atotheb = aint^bint;

quotient = atotheb/en;

if int32(quotient) == quotient
    fprintf('%d can be factored into %d^%d; the quotient is %d \n',en,aint,bint,quotient)
else
    fprintf('%d cannot be factored into %d^%d \n',en,aint,bint)
end
end




canfacn(5,5,5)
5 can be factored into 5^5; the quotient is 625 

canfacn(5,6,2)
5 cannot be factored into 6^2 


1)


**** note on this problem- since the limit of this function is 29 and I
     have to type the first 20 anyway, I chose to do this the obvious way;
     another valid way to do this, especially with a larger input range,
     would be to after 20, just concatenate 'one' through 'nine' with whatever base
     is appropriate, eg 'thirty', 'forty', etc.


type num2text

function numtext = num2text(num)

%num2text receives an integer, with a maximum integer of 29, and displays
%the number's text equivalent

if (int32(num) == num) && (num <= 29) && (num >= 0)

    if num == 0
        numtext = sprintf('zero');
    elseif num == 1
        numtext = sprintf('one');
    elseif num == 2
        numtext = sprintf('two');
    elseif num == 3
        numtext = sprintf('three');
    elseif num == 4
        numtext = sprintf('four');
    elseif num == 5 
        numtext = sprintf('five');
    elseif num == 6
        numtext = sprintf('six');
    elseif num == 7
        numtext = sprintf('seven');
    elseif num == 8
        numtext = sprintf('eight');
    elseif num == 9
        numtext = sprintf('nine');
    elseif num == 10
        numtext = sprintf('ten');
    elseif num == 11
        numtext = sprintf('eleven');
    elseif num == 12
        numtext = sprintf('twelve');
    elseif num == 13
        numtext = sprintf('thirteen');
    elseif num == 14
        numtext = sprintf('forteen');
    elseif num == 15
        numtext = sprintf('fifteen');
    elseif num == 16
        numtext = sprintf('sixteen');
    elseif num == 17
        numtext = sprintf('seventeen');
    elseif num == 18
        numtext = sprintf('eighteen');
    elseif num == 19
        numtext = sprintf('nineteen');
    elseif num == 20
        numtext = sprintf('twenty');
    elseif num == 21
        numtext = sprintf('twenty-one');
    elseif num == 22
        numtext = sprintf('twenty-two');
    elseif num == 23
        numtext = sprintf('twenty-three');
    elseif num == 24
        numtext = sprintf('twenty-four');
    elseif num == 25
        numtext = sprintf('twenty-five');
    elseif num == 26
        numtext = sprintf('twenty-six');
    elseif num == 27
        numtext = sprintf('twenty-seven');
    elseif num == 28
        numtext = sprintf('twenty-eight');
    elseif num == 29
        numtext = sprintf('twenty-nine');
    end
    
else
    fprintf('The integer range of this function is 0 to 29\n')
end






num2text(15)

ans =

fifteen



num2text(30)
The integer range of this function is 0 to 29



4)



type ascarray

function asctruevec = ascarray(array)

%asctruevec receives an input array of six-digit integers and determines
%if the first 3 digits of each element are in ascending order.  It then
%returns a vector of logical true or falses that correspond to the results.


array = array';
raylen = length(array);
asctruevec = zeros(1,raylen);

for i = 1:raylen
    intstr = int2str(array(i));
    if (intstr(3) > intstr(2)) && (intstr(2) > intstr(1))
    asctruevec(1,i) = 1;
    end
end
end




x

x =

      432907
      235950
      579807
      760365
      529823
      640526
      209069
      379818
      783329
      680846


ascarray(x)



ans =

     0     1     1     0     0     0     0     1     0     0



6)



type multiseq

function oneofakind = multiseq(seq)

%multiseq receives a sequence of positive integers and outputs a sequence
%in which subsequences of repeated integers are replaced be a single
%instance of the digit preceded by an appropriate count

sequlen = length(seq);
j = 0;

for i = 1:(sequlen-1)
    if (seq(i) == seq(i+1))      
        j = j + 1;
    end
    if seq(i) ~= seq(i+1)
            if j > 0
                j = j+1;
                fprintf('%d*%d ',j,seq(i))
                j = 0;
            else
            
            fprintf('%d ',seq(i))
            end
    end
end

fprintf('%d \n', seq(sequlen))
end




repeat = [4 3 3 3 3 3 2 5 5 5 8 7 8 ]

repeat =

  Columns 1 through 11

     4     3     3     3     3     3     2     5     5     5     8

  Columns 12 through 13

     7     8


multiseq(repeat)
4 5*3 2 3*5 8 7 8 


